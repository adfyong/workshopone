Maps in Go
22 Feb 2017
Tags: edmontongo, golang, workshop

Lukasz Rozycki
[[https://lukaszr.com]]

* Maps

- Hash Table, Dictionary
- Mapping from key to a value
- Fast lookups, adds, and deletes
- A Go map type looks like this:
 map[KeyType]ValueType
- Maps are not safe for concurrent use

* What can be a key?

- Any type that is comparable
 ==    equal
 !=    not equal
- boolean, numeric, string, pointer
- interface type, channel
- struct or array containing above
- Not slice, map, nor function

* Creating a map 
- composite literal (note trailing comma)
.play 07-map/compositeliteral.go /START/,/END/
- empty map
.play 07-map/emptyliteral.go /START/,/END/

* Lookup
- index expression
.play 07-map/lookup.go /START/,/END/
- zero value
.play 07-map/zerovalue.go /START/,/END/
- what about Baby?
.play 07-map/commaok1.go /START/,/END/

* Lookup
- "comma ok" idiom
.play 07-map/commaok2.go /START/,/END/
- concise notation
.play 07-map/commaok3.go /START/,/END/

* Lookup
- ignore age
.play 07-map/commaok4.go /START/,/END/
- why underscore?
.play 07-map/commaok5.go /START/,/END/

* Addition
- index expression
.play 07-map/put.go /START/,/END/
- read and modify
.play 07-map/put2.go /START/,/END/

* Deletion
- delete built-in function
 func delete(m map[Type]Type1, key Type)
.play 07-map/delete.go /START/,/END/
- delete no-op
.play 07-map/delete2.go /START/,/END/

* Wrong types
- get wrong type
.play 07-map/lookup3.go /START/,/END/
- add wrong type
.play 07-map/put3.go /START/,/END/
- delete wrong type
.play 07-map/delete3.go /START/,/END/

* Set with map
- create
 set := map[int]bool{}
- add to a aset
 set[3] = true
- remove from set
 delete(set, 7)
- check if set contains
 if(set[13]) ...

* Iteration
- for range
.play 07-map/for.go /START/,/END/
- order is random
.play 07-map/for2.go /START/,/END/

* Iteration
- blank value
.play 07-map/for3.go /START/,/END/
- key and value
.play 07-map/for4.go /START/,/END/
- blank key
.play 07-map/for5.go /START/,/END/

* Map is a reference type
- zero value is `nil`
- delete(nil, key) no-op
 TODO example
- passing to a function
 TODO example
- assigning second handle
 TODO example

* Exercises

- word count from go playground
 - provide package and method to split input
- bank
 - boolean deposit(bank, name, amount)
  - if not a client, than assume initial deposit
  - if value exceeds max int return false
 - boolean withdraw(bank, name, amount, max_overdraft)
  - final amount cannot be less than max_overdraft
  - only clients can withdraw

* Resources
- [[https://blog.golang.org/go-maps-in-action][Go maps in action]] 
- [[https://golang.org/doc/effective_go.html#maps][Effective Go]] Maps 
- [[https://tour.golang.org/moretypes/19][A Tour of Go]] Maps 
- [[https://www.manning.com/books/learn-go][Learn Go]] by Nathan Youngman Ch. 16. The ever versatile map   
